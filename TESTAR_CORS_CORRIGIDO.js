// Script para testar se o erro de CORS foi corrigido
// Execute no console do navegador

async function testarCorsCorrigido() {
  try {
    console.log('üîç Testando corre√ß√£o do erro de CORS...');
    
    console.log('\n‚úÖ PROBLEMAS IDENTIFICADOS E CORRIGIDOS:');
    console.log('  ‚ùå CORS policy blocked Firebase Storage URLs');
    console.log('  ‚ùå fetch() direto n√£o funcionava');
    console.log('  ‚úÖ AGORA: Usando Firebase SDK com getBlob()');
    console.log('  ‚úÖ AGORA: Extra√ß√£o correta do file path da URL');
    console.log('  ‚úÖ AGORA: Interface limpa sem lista duplicada');
    
    console.log('\nüîß CORRE√á√ïES APLICADAS:');
    console.log('1. INTERFACE:');
    console.log('   ‚ùå Lista detalhada de documentos (removida)');
    console.log('   ‚úÖ Apenas DocumentViewer + Download ZIP');
    console.log('   ‚úÖ Interface mais limpa e focada');
    console.log('');
    console.log('2. DOWNLOAD ZIP:');
    console.log('   ‚ùå fetch(doc.conteudo) ‚Üí CORS error');
    console.log('   ‚úÖ Firebase SDK getBlob(fileRef) ‚Üí Funciona!');
    console.log('   ‚úÖ Extra√ß√£o autom√°tica do file path');
    console.log('   ‚úÖ Fallback para fetch se necess√°rio');
    
    console.log('\nüì¶ FLUXO CORRIGIDO:');
    console.log('1. URL: https://firebasestorage.googleapis.com/v0/b/.../o/vendas%2F.../file.jpeg?alt=media&token=...');
    console.log('2. Extra√ß√£o: vendas/ID/file.jpeg');
    console.log('3. Firebase SDK: storageRef(storage, filePath)');
    console.log('4. Download: getBlob(fileRef)');
    console.log('5. ZIP: Adicionar blob ao arquivo');
    
    console.log('\nüöÄ PARA TESTAR:');
    console.log('1. Acesse: http://localhost:8081/acompanhamento');
    console.log('2. Clique em "Ver Detalhes" de uma venda com documentos');
    console.log('3. Clique "Baixar Todos os Documentos (ZIP)"');
    console.log('4. N√ÉO deve ter mais erros de CORS');
    console.log('5. ZIP deve ser gerado e baixado com sucesso');
    
    // Verificar se estamos numa p√°gina de detalhes de venda
    if (window.location.pathname.includes('venda')) {
      console.log('\n‚úÖ Voc√™ est√° numa p√°gina de detalhes de venda!');
      
      // Verificar se h√° bot√£o de download ZIP
      const botaoZip = Array.from(document.querySelectorAll('button')).find(btn => 
        btn.textContent.includes('ZIP') || btn.textContent.includes('Baixar Todos')
      );
      
      if (botaoZip) {
        console.log('‚úÖ Bot√£o de download ZIP encontrado');
        
        if (!botaoZip.disabled) {
          console.log('‚úÖ Bot√£o est√° habilitado - h√° documentos para testar!');
          console.log('üéØ CLIQUE NO BOT√ÉO PARA TESTAR A CORRE√á√ÉO');
          
          // Verificar contador de documentos
          const contador = document.querySelector('[class*="text-2xl"]');
          if (contador) {
            const numDocs = contador.textContent;
            console.log(`üìä ${numDocs} documentos encontrados para download`);
          }
          
        } else {
          console.log('‚ö†Ô∏è Bot√£o est√° desabilitado (sem documentos)');
        }
      } else {
        console.log('‚ùå Bot√£o de download ZIP n√£o encontrado');
      }
      
      // Verificar se a lista detalhada foi removida
      const listaDetalhada = document.querySelector('[class*="border-t"]:has(h5:contains("categoria"))');
      if (!listaDetalhada) {
        console.log('‚úÖ Lista detalhada removida com sucesso');
      } else {
        console.log('‚ö†Ô∏è Lista detalhada ainda presente (pode n√£o ter sido removida)');
      }
      
      // Verificar elementos principais
      const elementos = {
        documentViewer: Array.from(document.querySelectorAll('button')).find(btn => 
          btn.textContent.includes('Visualizar')
        ),
        contador: document.querySelector('[class*="text-2xl"]'),
        cardDocumentos: document.querySelector('[class*="card"]')
      };
      
      console.log('\nüìä INTERFACE ATUAL:');
      console.log(`  üëÅÔ∏è Bot√£o "Visualizar Documentos": ${elementos.documentViewer ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üì¶ Bot√£o "Download ZIP": ${botaoZip ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üìä Contador de documentos: ${elementos.contador ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üìã Card de documentos: ${elementos.cardDocumentos ? '‚úÖ' : '‚ùå'}`);
      
    } else if (window.location.pathname.includes('acompanhamento')) {
      console.log('\n‚úÖ Voc√™ est√° na p√°gina de acompanhamento!');
      console.log('üéØ Clique em "Ver Detalhes" de uma venda para testar a corre√ß√£o');
      
    } else {
      console.log('\nüìù Para testar a corre√ß√£o, v√° para:');
      console.log('  - Acompanhamento: http://localhost:8081/acompanhamento');
      console.log('  - Depois clique em "Ver Detalhes" de uma venda');
    }
    
    console.log('\nüéâ CORRE√á√ïES APLICADAS!');
    console.log('üí™ O que foi corrigido:');
    console.log('  ‚úÖ Erro de CORS no download ZIP');
    console.log('  ‚úÖ Interface limpa sem duplica√ß√£o');
    console.log('  ‚úÖ Firebase SDK para downloads');
    console.log('  ‚úÖ Extra√ß√£o autom√°tica de file paths');
    
    console.log('\nüìù RESULTADO ESPERADO:');
    console.log('  1. Interface mais limpa (sem lista detalhada)');
    console.log('  2. Download ZIP funcionando sem erros de CORS');
    console.log('  3. Console sem mensagens de "Access to fetch blocked"');
    console.log('  4. ZIP gerado com sucesso e baixado');
    
    console.log('\nüîß TECNOLOGIAS USADAS:');
    console.log('  - Firebase Storage SDK (getBlob)');
    console.log('  - JSZip para cria√ß√£o do arquivo');
    console.log('  - Extra√ß√£o autom√°tica de file paths');
    console.log('  - Error handling robusto');
    
    // Aguardar um pouco e dar feedback final
    setTimeout(() => {
      console.log('\nüîç VERIFICA√á√ÉO FINAL:');
      console.log('  - Se voc√™ v√™ este log, o JavaScript est√° funcionando');
      console.log('  - Se n√£o h√° mais lista detalhada, a interface foi limpa');
      console.log('  - Teste o download ZIP para confirmar que CORS foi resolvido');
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    console.log('‚ö†Ô∏è Se houve erro, verifique o console por mensagens adicionais');
  }
}

// Executar teste
testarCorsCorrigido();