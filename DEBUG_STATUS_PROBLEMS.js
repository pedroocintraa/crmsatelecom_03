// Script para debugar problemas com transi√ß√µes de status
// Execute no console do navegador

async function debugStatusProblems() {
  try {
    console.log('üîç Debugando problemas com transi√ß√µes de status...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('acompanhamento')) {
      console.log('‚ùå Execute este script na p√°gina "Acompanhamento de Vendas"');
      console.log('üìù V√° para: http://localhost:8080/acompanhamento');
      return;
    }

    console.log('‚úÖ P√°gina correta detectada');
    
    // Verificar se h√° vendas na lista
    const vendasCards = document.querySelectorAll('[class*="card"]');
    console.log(`üìã Vendas encontradas: ${vendasCards.length}`);
    
    if (vendasCards.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma venda encontrada na lista');
      return;
    }
    
    // Verificar status das vendas
    console.log('\nüìä Status das vendas encontradas:');
    const statusCounts = {};
    
    vendasCards.forEach((card, index) => {
      const statusElement = card.querySelector('[class*="badge"]');
      if (statusElement) {
        const status = statusElement.textContent.trim();
        statusCounts[status] = (statusCounts[status] || 0) + 1;
        console.log(`üìã Venda ${index + 1}: ${status}`);
      }
    });
    
    console.log('\nüìà Distribui√ß√£o de status:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`  ${status}: ${count} vendas`);
    });
    
    // Verificar bot√µes de a√ß√£o dispon√≠veis
    console.log('\nüîß Verificando bot√µes de a√ß√£o...');
    const botoesAcao = document.querySelectorAll('button');
    const botoesStatus = Array.from(botoesAcao).filter(btn => 
      btn.textContent && (
        btn.textContent.includes('Iniciar') ||
        btn.textContent.includes('Auditada') ||
        btn.textContent.includes('Gerada') ||
        btn.textContent.includes('Habilita√ß√£o') ||
        btn.textContent.includes('Habilitada') ||
        btn.textContent.includes('Perdida')
      )
    );
    
    console.log(`üìä Bot√µes de a√ß√£o encontrados: ${botoesStatus.length}`);
    botoesStatus.forEach((btn, index) => {
      console.log(`  ${index + 1}. ${btn.textContent.trim()}`);
    });
    
    // Verificar bot√µes de detalhes
    const botoesDetalhes = Array.from(botoesAcao).filter(btn => 
      btn.textContent && btn.textContent.includes('Ver Detalhes')
    );
    
    console.log(`üìä Bot√µes "Ver Detalhes" encontrados: ${botoesDetalhes.length}`);
    
    // Verificar se h√° vendas auditadas (que deveriam poder ir para "gerada")
    const vendasAuditadas = Object.entries(statusCounts).filter(([status]) => 
      status.includes('Auditada')
    );
    
    console.log('\nüîç Vendas Auditadas (que deveriam poder ir para "Gerada"):');
    if (vendasAuditadas.length > 0) {
      console.log('‚úÖ Vendas auditadas encontradas');
      console.log('üìù Para testar transi√ß√£o para "Gerada":');
      console.log('1. Clique em "Ver Detalhes" de uma venda auditada');
      console.log('2. Verifique se o bot√£o "Marcar como Gerada" aparece');
      console.log('3. Clique no bot√£o e preencha as observa√ß√µes');
      console.log('4. Confirme a mudan√ßa');
    } else {
      console.log('‚ùå Nenhuma venda auditada encontrada');
      console.log('üìù Primeiro precisa ter vendas em status "Auditada"');
    }
    
    // Verificar se h√° vendas pendentes (que deveriam poder ir para "perdida")
    const vendasPendentes = Object.entries(statusCounts).filter(([status]) => 
      status.includes('Pendente')
    );
    
    console.log('\nüîç Vendas Pendentes (que deveriam poder ir para "Perdida"):');
    if (vendasPendentes.length > 0) {
      console.log('‚úÖ Vendas pendentes encontradas');
      console.log('üìù Para testar transi√ß√£o para "Perdida":');
      console.log('1. Clique em "Ver Detalhes" de uma venda pendente');
      console.log('2. Verifique se o bot√£o "Marcar como Perdida" aparece');
      console.log('3. Clique no bot√£o e preencha o motivo');
      console.log('4. Confirme a mudan√ßa');
    } else {
      console.log('‚ùå Nenhuma venda pendente encontrada');
      console.log('üìù Primeiro precisa ter vendas em status "Pendente"');
    }
    
    console.log('\nüîç Poss√≠veis Problemas Identificados:');
    console.log('1. ‚ùå Valida√ß√£o muito rigorosa impedindo transi√ß√µes');
    console.log('2. ‚ùå Permiss√µes de usu√°rio incorretas');
    console.log('3. ‚ùå Dados extras obrigat√≥rios n√£o sendo preenchidos');
    console.log('4. ‚ùå Documentos m√≠nimos n√£o atingidos');
    console.log('5. ‚ùå Interface n√£o mostrando bot√µes corretos');
    
    console.log('\nüõ†Ô∏è Para debugar completamente:');
    console.log('1. Abra o console do navegador (F12)');
    console.log('2. Clique em "Ver Detalhes" de uma venda');
    console.log('3. Verifique se h√° erros no console');
    console.log('4. Teste clicar nos bot√µes de a√ß√£o');
    console.log('5. Verifique se os di√°logos aparecem');
    console.log('6. Preencha os dados obrigat√≥rios');
    console.log('7. Confirme as mudan√ßas');
    
    console.log('\n‚ö†Ô∏è Verifica√ß√µes Importantes:');
    console.log('- Quantos documentos est√£o anexados? (m√≠nimo 3 para "Gerada")');
    console.log('- Qual √© a fun√ß√£o do usu√°rio logado?');
    console.log('- Os campos obrigat√≥rios est√£o preenchidos?');
    console.log('- Os di√°logos est√£o aparecendo corretamente?');
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  }
}

// Executar debug
debugStatusProblems(); 