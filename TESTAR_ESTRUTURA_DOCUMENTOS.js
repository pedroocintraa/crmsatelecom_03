// Script para testar a estrutura dos documentos
// Execute no console do navegador na p√°gina de detalhes da venda

async function testarEstruturaDocumentos() {
  try {
    console.log('üîç Testando estrutura dos documentos...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('venda')) {
      console.log('‚ùå Execute este script na p√°gina de detalhes de uma venda');
      console.log('üìù V√° para: http://localhost:8080/venda/[ID_DA_VENDA]');
      return;
    }

    console.log('‚úÖ P√°gina de detalhes de venda detectada');
    
    // Aguardar um pouco para a p√°gina carregar
    setTimeout(() => {
      console.log('\nüéØ INSTRU√á√ïES PARA TESTE:');
      console.log('1. üîÑ Certifique-se de estar numa venda que tem documentos anexados');
      console.log('2. üîÑ Clique no bot√£o "Baixar Todos os Documentos"');
      console.log('3. üîÑ Observe os logs detalhados no console');
      console.log('4. üîÑ Identifique onde exatamente est√° falhando');
      
      console.log('\nüìã LOGS ADICIONADOS PARA DEBUG:');
      console.log('‚úÖ DEBUG COMPLETO - Iniciando baixarTodosDocumentos');
      console.log('‚úÖ venda: [objeto completo]');
      console.log('‚úÖ venda.documentos: [estrutura dos documentos]');
      console.log('‚úÖ typeof venda.documentos');
      console.log('‚úÖ Object.keys(venda.documentos)');
      console.log('‚úÖ Object.keys length');
      console.log('‚úÖ Para cada categoria: tipo, isArray, conte√∫do, length');
      console.log('‚úÖ Para cada documento: objeto completo, nome, conte√∫do, tipo');
      
      console.log('\nüìã POSS√çVEIS PROBLEMAS E LOGS ESPERADOS:');
      
      console.log('\nüîç CASO 1: venda.documentos n√£o existe');
      console.log('Log esperado: "‚ùå venda.documentos √© null/undefined"');
      
      console.log('\nüîç CASO 2: venda.documentos existe mas est√° vazio');
      console.log('Log esperado: "‚ùå venda.documentos est√° vazio (sem chaves)"');
      
      console.log('\nüîç CASO 3: docs n√£o √© um array');
      console.log('Log esperado: "‚ùå Categoria [X]: docs n√£o √© um array"');
      
      console.log('\nüîç CASO 4: array de docs est√° vazio');
      console.log('Log esperado: "‚ùå Categoria [X]: array de docs est√° vazio"');
      
      console.log('\nüîç CASO 5: documento n√£o tem campo conteudo');
      console.log('Log esperado: "‚ùå Documento [X] n√£o tem conte√∫do"');
      
      console.log('\nüîç CASO 6: formato do conte√∫do n√£o √© reconhecido');
      console.log('Log esperado: "‚ùå Documento [X] formato n√£o reconhecido"');
      
      console.log('\nüîç CASO 7: erro no download via Firebase SDK');
      console.log('Log esperado: "‚ö†Ô∏è Erro no download via Firebase SDK"');
      
      console.log('\nüìã ESTRUTURAS POSS√çVEIS DOS DOCUMENTOS:');
      
      console.log('\nüìÑ ESTRUTURA CORRETA:');
      console.log(`{
  "documentos": {
    "comprovanteEndereco": [
      {
        "id": "doc_123",
        "nome": "arquivo.jpeg",
        "tipo": "image/jpeg",
        "conteudo": "https://firebasestorage.googleapis.com/...",
        "dataUpload": "2025-01-01T00:00:00.000Z"
      }
    ]
  }
}`);
      
      console.log('\nüìÑ ESTRUTURA PROBLEMA 1 - docs n√£o √© array:');
      console.log(`{
  "documentos": {
    "comprovanteEndereco": {
      "id": "doc_123",
      "nome": "arquivo.jpeg"
    }
  }
}`);
      
      console.log('\nüìÑ ESTRUTURA PROBLEMA 2 - sem campo conteudo:');
      console.log(`{
  "documentos": {
    "comprovanteEndereco": [
      {
        "id": "doc_123",
        "nome": "arquivo.jpeg",
        "tipo": "image/jpeg"
        // SEM campo "conteudo"
      }
    ]
  }
}`);
      
      console.log('\nüìÑ ESTRUTURA PROBLEMA 3 - conteudo vazio:');
      console.log(`{
  "documentos": {
    "comprovanteEndereco": [
      {
        "id": "doc_123",
        "nome": "arquivo.jpeg",
        "tipo": "image/jpeg",
        "conteudo": ""  // VAZIO
      }
    ]
  }
}`);
      
      console.log('\n‚ö†Ô∏è VERIFICA√á√ïES IMPORTANTES:');
      console.log('1. ‚úÖ Verifique se aparece "‚úÖ venda.documentos existe e tem chaves"');
      console.log('2. ‚úÖ Verifique quantas categorias s√£o processadas');
      console.log('3. ‚úÖ Verifique se cada categoria √© um array');
      console.log('4. ‚úÖ Verifique se cada documento tem campo "conteudo"');
      console.log('5. ‚úÖ Verifique o formato do conte√∫do (base64 ou URL)');
      console.log('6. ‚úÖ Identifique em qual etapa est√° falhando');
      
      console.log('\nüéØ AP√ìS EXECUTAR O TESTE:');
      console.log('üìù Copie TODOS os logs da fun√ß√£o baixarTodosDocumentos');
      console.log('üìù Cole aqui para eu analisar exatamente onde est√° o problema');
      console.log('üìù Vou ajustar a fun√ß√£o conforme necess√°rio');
      
      // Verificar se h√° bot√£o de download
      const downloadButtons = document.querySelectorAll('button');
      let botaoDownload = null;
      
      downloadButtons.forEach((button) => {
        const buttonText = button.textContent?.toLowerCase() || '';
        if (buttonText.includes('baixar') && buttonText.includes('documento')) {
          botaoDownload = button;
        }
      });
      
      if (!botaoDownload) {
        console.log('\n‚ùå Bot√£o "Baixar Todos os Documentos" n√£o encontrado');
        console.log('üìù Verifique se a venda tem documentos anexados');
      } else {
        console.log('\n‚úÖ Bot√£o "Baixar Todos os Documentos" encontrado!');
        console.log('üéâ PRONTO PARA TESTE DE ESTRUTURA!');
        console.log('üìù Clique no bot√£o e observe os logs detalhados');
      }
      
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testarEstruturaDocumentos();