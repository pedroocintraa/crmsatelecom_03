// Script para testar a corre√ß√£o final do download
// Execute no console do navegador na p√°gina de detalhes da venda

async function testarCorrecaoDownloadFinal() {
  try {
    console.log('üîç Testando corre√ß√£o final do download...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('venda')) {
      console.log('‚ùå Execute este script na p√°gina de detalhes de uma venda');
      console.log('üìù V√° para: http://localhost:8080/venda/[ID_DA_VENDA]');
      return;
    }

    console.log('‚úÖ P√°gina de detalhes de venda detectada');
    
    // Aguardar um pouco para a p√°gina carregar
    setTimeout(() => {
      console.log('\nüéØ INSTRU√á√ïES PARA TESTE:');
      console.log('1. üîÑ Clique no bot√£o "Baixar Todos os Documentos"');
      console.log('2. üîÑ Observe os logs detalhados no console');
      console.log('3. üîÑ Verifique se o download funciona agora');
      
      console.log('\nüìã CORRE√á√ïES IMPLEMENTADAS:');
      console.log('‚úÖ Melhor extra√ß√£o do caminho do arquivo da URL');
      console.log('‚úÖ Logs detalhados da URL e pathname');
      console.log('‚úÖ Fallback para nome do arquivo se extra√ß√£o falhar');
      console.log('‚úÖ Download alternativo via Canvas/Image (sem CORS)');
      console.log('‚úÖ Timeout de 10 segundos para cada imagem');
      console.log('‚úÖ M√∫ltiplas tentativas de download');
      
      console.log('\nüìã FLUXO DE DOWNLOAD ATUALIZADO:');
      console.log('1. üîÑ Tentar Firebase SDK (getBlob)');
      console.log('2. üîÑ Se falhar: tentar Canvas/Image (sem CORS)');
      console.log('3. üîÑ Se falhar: tentar fetch direto (pode dar CORS)');
      
      console.log('\nüìã LOGS ESPERADOS AGORA:');
      console.log('- üîç URL completa: https://firebasestorage.googleapis.com/...');
      console.log('- üîç URL pathname: /v0/b/projeto.app/o/vendas%2F...');
      console.log('- üìÑ Caminho extra√≠do (padr√£o 1): vendas/user/arquivo.jpeg');
      console.log('OU');
      console.log('- ‚ö†Ô∏è Erro no download via Firebase SDK: [erro]');
      console.log('- üìÑ Tentando download alternativo...');
      console.log('- ‚úÖ Download alternativo bem-sucedido via canvas: 12345 bytes');
      
      console.log('\nüîß VANTAGENS DO DOWNLOAD VIA CANVAS:');
      console.log('‚úÖ N√£o sofre bloqueio de CORS para imagens');
      console.log('‚úÖ Funciona com URLs p√∫blicas do Firebase Storage');
      console.log('‚úÖ Converte automaticamente para formato adequado');
      console.log('‚úÖ Suporta crossOrigin="anonymous"');
      console.log('‚úÖ Timeout para evitar travamento');
      
      console.log('\nüìÑ EXEMPLO DE URL ANALISADA:');
      const exemploUrl = 'https://firebasestorage.googleapis.com/v0/b/crm-s-a-telecom.firebasestorage.app/o/vendas%2F1WiyyOWIArbn7bnQ7ctMHzJtT8Q2%2F1WiyyOWIArbn7bnQ7ctMHzJtT8Q2_comprovanteEndereco_0_1754087378141.jpeg?alt=media&token=3f458996-677f-4c35-9662-87adc8caebd4';
      
      try {
        const url = new URL(exemploUrl);
        console.log('üîç Pathname:', url.pathname);
        
        const pathMatch = url.pathname.match(/\/o\/(.+)/);
        if (pathMatch) {
          const filePath = decodeURIComponent(pathMatch[1]);
          console.log('üìÑ Caminho extra√≠do:', filePath);
        }
      } catch (error) {
        console.log('‚ùå Erro no exemplo:', error);
      }
      
      console.log('\n‚ö†Ô∏è VERIFICA√á√ïES IMPORTANTES:');
      console.log('1. ‚úÖ Deve mostrar URL completa e pathname');
      console.log('2. ‚úÖ Deve extrair caminho do arquivo corretamente');
      console.log('3. ‚úÖ Se Firebase SDK falhar, deve tentar canvas');
      console.log('4. ‚úÖ Deve mostrar "Download alternativo bem-sucedido"');
      console.log('5. ‚úÖ Deve mostrar tamanho em bytes de cada documento');
      console.log('6. ‚úÖ Deve gerar e baixar o arquivo ZIP');
      
      console.log('\nüöÄ BENEF√çCIOS DAS CORRE√á√ïES:');
      console.log('‚úÖ M√∫ltiplas estrat√©gias de download');
      console.log('‚úÖ Logs detalhados para debug');
      console.log('‚úÖ Contorna problemas de CORS de forma inteligente');
      console.log('‚úÖ Timeout para evitar travamento');
      console.log('‚úÖ Fallback robusto');
      
      // Verificar se h√° bot√£o de download
      const downloadButtons = document.querySelectorAll('button');
      let botaoDownload = null;
      
      downloadButtons.forEach((button) => {
        const buttonText = button.textContent?.toLowerCase() || '';
        if (buttonText.includes('baixar') && buttonText.includes('documento')) {
          botaoDownload = button;
        }
      });
      
      if (!botaoDownload) {
        console.log('\n‚ùå Bot√£o "Baixar Todos os Documentos" n√£o encontrado');
        console.log('üìù Verifique se a venda tem documentos anexados');
      } else {
        console.log('\n‚úÖ Bot√£o "Baixar Todos os Documentos" encontrado!');
        console.log('üéâ PRONTO PARA TESTE FINAL!');
        console.log('üìù Clique no bot√£o para testar todas as corre√ß√µes');
      }
      
      console.log('\nüîç POSS√çVEIS RESULTADOS:');
      console.log('‚úÖ SUCESSO: Todos os documentos baixados via Firebase SDK');
      console.log('‚úÖ SUCESSO: Alguns via Firebase SDK, outros via Canvas');
      console.log('‚úÖ SUCESSO: Todos via Canvas (contornando CORS)');
      console.log('‚ùå FALHA: Se nem Canvas nem fetch funcionarem');
      
      console.log('\nüìù AP√ìS O TESTE:');
      console.log('- Se ainda der erro, copie TODOS os logs aqui');
      console.log('- Se funcionar, confirme que o ZIP foi baixado');
      console.log('- Verifique se o ZIP cont√©m todos os documentos');
      console.log('- Teste abrir os documentos dentro do ZIP');
      
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testarCorrecaoDownloadFinal();