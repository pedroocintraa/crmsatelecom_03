// Script para testar se a corre√ß√£o final da valida√ß√£o funcionou
// Execute no console do navegador

async function testarCorrecaoValidacaoFinal() {
  try {
    console.log('üß™ Testando corre√ß√£o final da valida√ß√£o...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('acompanhamento')) {
      console.log('‚ùå Execute este script na p√°gina de acompanhamento');
      console.log('üìù V√° para: http://localhost:8080/acompanhamento');
      return;
    }

    console.log('‚úÖ P√°gina correta detectada');
    
    // Aguardar um pouco para a p√°gina carregar
    setTimeout(() => {
      console.log('\nüîç Verificando elementos da p√°gina...');
      
      // Verificar se h√° vendas em atendimento
      const vendasElements = document.querySelectorAll('*');
      let vendasEmAtendimento = [];
      
      vendasElements.forEach(element => {
        if (element.textContent && element.textContent.includes('Em Atendimento')) {
          vendasEmAtendimento.push(element);
        }
      });
      
      console.log(`üìä Vendas em atendimento encontradas: ${vendasEmAtendimento.length}`);
      
      // Verificar se h√° bot√µes de a√ß√£o
      const actionButtons = document.querySelectorAll('button');
      let botoesAuditada = [];
      
      actionButtons.forEach((button, index) => {
        const buttonText = button.textContent?.trim();
        if (buttonText && buttonText.toLowerCase().includes('auditada')) {
          botoesAuditada.push(button);
          console.log(`‚úÖ Bot√£o "Auditada" encontrado: "${buttonText}"`);
        }
      });
      
      console.log(`üìä Bot√µes "Auditada" encontrados: ${botoesAuditada.length}`);
      
      if (botoesAuditada.length > 0) {
        console.log('\nüéØ INSTRU√á√ïES PARA TESTE:');
        console.log('1. üîÑ Clique no bot√£o "Auditada" de uma venda em atendimento');
        console.log('2. üîÑ Verifique se o popup da data de instala√ß√£o aparece (SEM erro de valida√ß√£o)');
        console.log('3. üîÑ Se aparecer, preencha a data e confirme');
        console.log('4. üîÑ Verifique se o status √© alterado corretamente');
        
        console.log('\nüìã LOGS ESPERADOS:');
        console.log('- Debug processamento: { needsInstallDate: true, action: "auditada" }');
        console.log('- Abrindo di√°logo de data de instala√ß√£o');
        console.log('- Di√°logo definido como true');
        console.log('- (Popup aparece para preencher data)');
        console.log('- handleInstallConfirm: { dataInstalacao, pendingAction }');
        console.log('- Resultado da valida√ß√£o: { valid: true, errors: [] }');
        console.log('- Chamando onStatusChange com status: auditada');
      } else {
        console.log('\n‚ùå Nenhum bot√£o "Auditada" encontrado');
        console.log('üìù Verifique se h√° vendas em atendimento na p√°gina');
      }
      
      // Verificar se h√° erros no console
      const originalError = console.error;
      const errors = [];
      
      console.error = function(...args) {
        errors.push(args.join(' '));
        originalError.apply(console, args);
      };
      
      // Aguardar um pouco e verificar erros
      setTimeout(() => {
        if (errors.length > 0) {
          console.log('\n‚ùå Erros encontrados no console:');
          errors.forEach(error => {
            console.log(`- ${error}`);
          });
        } else {
          console.log('\n‚úÖ Nenhum erro encontrado no console');
        }
        
        // Verificar se h√° erros espec√≠ficos de valida√ß√£o
        const validacaoErrors = errors.filter(error => 
          error.includes('valida√ß√£o') || error.includes('obrigat√≥ria') || error.includes('obrigat√≥rio')
        );
        
        if (validacaoErrors.length > 0) {
          console.log('\n‚ùå Ainda h√° erros de valida√ß√£o:');
          validacaoErrors.forEach(error => {
            console.log(`- ${error}`);
          });
        } else {
          console.log('\n‚úÖ Nenhum erro de valida√ß√£o encontrado');
        }
        
        console.log('\nüìä RESUMO DO TESTE:');
        console.log(`- Vendas em atendimento: ${vendasEmAtendimento.length}`);
        console.log(`- Bot√µes "Auditada": ${botoesAuditada.length}`);
        console.log(`- Erros de valida√ß√£o: ${validacaoErrors.length}`);
        
        if (botoesAuditada.length > 0 && validacaoErrors.length === 0) {
          console.log('\nüéâ PRONTO PARA TESTE!');
          console.log('üìù Clique em um bot√£o "Auditada" - o popup deve aparecer sem erro');
        } else if (validacaoErrors.length > 0) {
          console.log('\n‚ùå Ainda h√° problemas de valida√ß√£o');
        } else {
          console.log('\n‚ÑπÔ∏è Verifique se h√° vendas em atendimento');
        }
      }, 1000);
      
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testarCorrecaoValidacaoFinal(); 