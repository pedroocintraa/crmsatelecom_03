// Script para testar o formul√°rio de venda
// Execute no console do navegador

async function testarFormularioVenda() {
  try {
    console.log('üß™ Testando formul√°rio de venda...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('nova-venda')) {
      console.log('‚ùå Execute este script na p√°gina "Nova Venda"');
      console.log('üìù V√° para: http://localhost:8080/nova-venda');
      return;
    }

    console.log('‚úÖ P√°gina correta detectada');
    
    // Verificar se o formul√°rio existe
    const form = document.querySelector('form');
    if (!form) {
      console.log('‚ùå Formul√°rio n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Formul√°rio encontrado');
    
    // Verificar se os campos obrigat√≥rios existem
    const camposObrigatorios = [
      'input[name="cliente.nome"]',
      'input[name="cliente.telefone"]',
      'input[name="cliente.cpf"]'
    ];
    
    const camposEncontrados = camposObrigatorios.map(selector => {
      const campo = document.querySelector(selector);
      return { selector, encontrado: !!campo };
    });
    
    console.log('üìã Campos obrigat√≥rios:');
    camposEncontrados.forEach(({ selector, encontrado }) => {
      console.log(`  ${encontrado ? '‚úÖ' : '‚ùå'} ${selector}`);
    });
    
    // Verificar se os componentes de upload existem
    const uploadComponents = document.querySelectorAll('[data-testid*="upload"], [class*="upload"]');
    console.log(`üìÑ Componentes de upload encontrados: ${uploadComponents.length}`);
    
    // Verificar se o bot√£o de submit existe
    const submitButton = document.querySelector('button[type="submit"], input[type="submit"]');
    if (submitButton) {
      console.log('‚úÖ Bot√£o de submit encontrado');
      console.log(`üìù Texto do bot√£o: "${submitButton.textContent?.trim()}"`);
    } else {
      console.log('‚ùå Bot√£o de submit n√£o encontrado');
    }
    
    // Verificar se h√° erros no console
    console.log('\nüîç Verificando erros no console...');
    const originalError = console.error;
    const errors = [];
    
    console.error = (...args) => {
      errors.push(args.join(' '));
      originalError.apply(console, args);
    };
    
    // Simular preenchimento de campos
    console.log('\nüìù Simulando preenchimento de campos...');
    
    const nomeInput = document.querySelector('input[name="cliente.nome"]');
    if (nomeInput) {
      nomeInput.value = 'TESTE AUTOM√ÅTICO';
      nomeInput.dispatchEvent(new Event('input', { bubbles: true }));
      console.log('‚úÖ Campo nome preenchido');
    }
    
    const telefoneInput = document.querySelector('input[name="cliente.telefone"]');
    if (telefoneInput) {
      telefoneInput.value = '62985886877';
      telefoneInput.dispatchEvent(new Event('input', { bubbles: true }));
      console.log('‚úÖ Campo telefone preenchido');
    }
    
    const cpfInput = document.querySelector('input[name="cliente.cpf"]');
    if (cpfInput) {
      cpfInput.value = '33344455566';
      cpfInput.dispatchEvent(new Event('input', { bubbles: true }));
      console.log('‚úÖ Campo CPF preenchido');
    }
    
    // Verificar se o reset est√° funcionando
    console.log('\nüîÑ Testando fun√ß√£o reset...');
    
    // Tentar acessar a fun√ß√£o reset do React Hook Form
    const formElement = document.querySelector('form');
    if (formElement) {
      const formData = new FormData(formElement);
      console.log('üìã Dados do formul√°rio antes do reset:');
      for (let [key, value] of formData.entries()) {
        console.log(`  ${key}: ${value}`);
      }
    }
    
    console.log('\n‚úÖ Teste do formul√°rio conclu√≠do!');
    console.log('\nüìã Resumo:');
    console.log(`- Formul√°rio: ‚úÖ Encontrado`);
    console.log(`- Campos obrigat√≥rios: ${camposEncontrados.filter(c => c.encontrado).length}/${camposEncontrados.length}`);
    console.log(`- Componentes de upload: ${uploadComponents.length}`);
    console.log(`- Bot√£o submit: ${submitButton ? '‚úÖ' : '‚ùå'}`);
    console.log(`- Erros detectados: ${errors.length}`);
    
    if (errors.length > 0) {
      console.log('\n‚ö†Ô∏è Erros encontrados:');
      errors.forEach((error, index) => {
        console.log(`  ${index + 1}. ${error}`);
      });
    }
    
    // Restaurar console.error original
    console.error = originalError;
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testarFormularioVenda(); 