// Script para testar a corre√ß√£o final do fuso hor√°rio
// Execute no console do navegador

async function testarCorrecaoFusoHorarioFinal() {
  try {
    console.log('üîç Testando corre√ß√£o final do fuso hor√°rio...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('acompanhamento')) {
      console.log('‚ùå Execute este script na p√°gina de acompanhamento');
      console.log('üìù V√° para: http://localhost:8080/acompanhamento');
      return;
    }

    console.log('‚úÖ P√°gina correta detectada');
    
    // Aguardar um pouco para a p√°gina carregar
    setTimeout(() => {
      console.log('\nüéØ INSTRU√á√ïES PARA TESTE:');
      console.log('1. üîÑ Encontre uma venda com status "em atendimento"');
      console.log('2. üîÑ Clique no bot√£o "Auditada"');
      console.log('3. üîÑ Preencha a data: 08/08/2025 (dia 8 de agosto)');
      console.log('4. üîÑ Confirme a a√ß√£o');
      console.log('5. üîÑ Verifique se aparece "08/08/2025" (n√£o 07/08/2025)');
      console.log('6. üîÑ Entre nos detalhes da venda');
      console.log('7. üîÑ Verifique se aparece "08/08/2025" no campo "Instala√ß√£o agendada para:"');
      console.log('8. üîÑ Atualize a p√°gina (F5) e verifique se persiste');
      
      console.log('\nüìã CORRE√á√ïES IMPLEMENTADAS:');
      console.log('‚úÖ handleAtualizarStatus agora passa dadosAdicionais corretamente');
      console.log('‚úÖ StatusSelector n√£o converte mais para ISO (mant√©m YYYY-MM-DD)');
      console.log('‚úÖ formatarDataBrasil agora processa YYYY-MM-DD diretamente');
      console.log('‚úÖ Removida convers√£o desnecess√°ria de timezone');
      
      console.log('\nüìã LOGS ESPERADOS:');
      console.log('- handleInstallConfirm: 2025-08-08 auditada');
      console.log('- üîç ====== IN√çCIO DO handleAtualizarStatus ======');
      console.log('- üîç Incluindo dataInstalacao nos dados adicionais: "2025-08-08"');
      console.log('- üîç ExtraData para processamento: { dataInstalacao: "2025-08-08" }');
      console.log('- üîç Salvando dataInstalacao para auditada: "2025-08-08"');
      console.log('- üîç Updates processados: { dataInstalacao: "2025-08-08" }');
      console.log('- üîç Dados finais para atualiza√ß√£o: { status: "auditada", dataInstalacao: "2025-08-08" }');
      console.log('- üîç formatarDataBrasil recebeu: "2025-08-08"');
      console.log('- üîç Data simples detectada: "2025-08-08"');
      console.log('- üîç Data formatada (m√©todo simples): "08/08/2025"');
      
      console.log('\nüîç Verificando vendas em atendimento...');
      
      // Verificar se h√° vendas em atendimento
      const vendasElements = document.querySelectorAll('*');
      let vendasEmAtendimento = [];
      
      vendasElements.forEach(element => {
        if (element.textContent && element.textContent.includes('em atendimento')) {
          vendasEmAtendimento.push(element);
        }
      });
      
      console.log(`üìä Vendas em atendimento encontradas: ${vendasEmAtendimento.length}`);
      
      if (vendasEmAtendimento.length === 0) {
        console.log('\n‚ùå Nenhuma venda em atendimento encontrada');
        console.log('üìù Crie uma venda e mude o status para "em atendimento" primeiro');
      } else {
        console.log('\n‚úÖ Vendas em atendimento encontradas!');
        console.log('üéâ PRONTO PARA TESTE DE FUSO HOR√ÅRIO!');
        console.log('üìù Clique no bot√£o "Auditada" de uma venda em atendimento');
      }
      
      // Verificar se h√° bot√µes de a√ß√£o
      const actionButtons = document.querySelectorAll('button');
      let botoesAuditada = [];
      
      actionButtons.forEach((button, index) => {
        const buttonText = button.textContent?.trim();
        if (buttonText && buttonText.toLowerCase().includes('auditada')) {
          botoesAuditada.push(button);
        }
      });
      
      console.log(`üìä Bot√µes "Auditada" encontrados: ${botoesAuditada.length}`);
      
      if (botoesAuditada.length > 0) {
        console.log('\nüéØ TESTE CR√çTICO DO FUSO HOR√ÅRIO:');
        console.log('üìù Data selecionada: 08/08/2025');
        console.log('üìù Data esperada na exibi√ß√£o: 08/08/2025');
        console.log('üìù Data N√ÉO deve aparecer como: 07/08/2025');
        
        console.log('\nüîß FORMATO SIMPLIFICADO:');
        console.log('üìù Entrada do input: "2025-08-08"');
        console.log('üìù Salvamento no Firebase: "2025-08-08"');
        console.log('üìù Exibi√ß√£o na tela: "08/08/2025"');
        console.log('üìù SEM convers√µes de timezone desnecess√°rias');
      }
      
      console.log('\n‚ö†Ô∏è VERIFICA√á√ïES IMPORTANTES:');
      console.log('1. ‚úÖ Data de entrada: 08/08/2025');
      console.log('2. ‚úÖ Data exibida: 08/08/2025 (MESMA data)');
      console.log('3. ‚úÖ Data persiste ap√≥s refresh da p√°gina');
      console.log('4. ‚úÖ Data aparece nos detalhes da venda');
      console.log('5. ‚úÖ N√£o h√° diferen√ßa de um dia');
      
      // Teste da fun√ß√£o de formata√ß√£o
      console.log('\nüß™ TESTE DA FUN√á√ÉO formatarDataBrasil:');
      
      // Simular o teste da fun√ß√£o
      const testarFormatacao = (dataInput, esperado) => {
        try {
          // Como n√£o podemos importar diretamente, vamos simular o teste
          const [year, month, day] = dataInput.split('-');
          const resultado = `${day}/${month}/${year}`;
          console.log(`üìù Input: "${dataInput}" ‚Üí Output: "${resultado}" (Esperado: "${esperado}")`);
          
          if (resultado === esperado) {
            console.log('‚úÖ Formata√ß√£o correta!');
          } else {
            console.log('‚ùå Formata√ß√£o incorreta!');
          }
        } catch (error) {
          console.log('‚ùå Erro na formata√ß√£o:', error);
        }
      };
      
      testarFormatacao('2025-08-08', '08/08/2025');
      testarFormatacao('2025-12-25', '25/12/2025');
      testarFormatacao('2025-01-01', '01/01/2025');
      
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testarCorrecaoFusoHorarioFinal();