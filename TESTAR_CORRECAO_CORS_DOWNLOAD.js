// Script para testar a corre√ß√£o do CORS no download de documentos
// Execute no console do navegador

async function testarCorrecaoCorsDownload() {
  try {
    console.log('üîç Testando corre√ß√£o do CORS no download...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('venda')) {
      console.log('‚ùå Execute este script na p√°gina de detalhes de uma venda');
      console.log('üìù V√° para: http://localhost:8080/venda/[ID_DA_VENDA]');
      return;
    }

    console.log('‚úÖ P√°gina de detalhes de venda detectada');
    
    // Aguardar um pouco para a p√°gina carregar
    setTimeout(() => {
      console.log('\nüéØ INSTRU√á√ïES PARA TESTE:');
      console.log('1. üîÑ Certifique-se de estar numa venda que tem documentos anexados');
      console.log('2. üîÑ Clique no bot√£o "Baixar Todos os Documentos"');
      console.log('3. üîÑ Observe os logs no console');
      console.log('4. üîÑ Verifique se o download do ZIP funciona agora');
      
      console.log('\nüìã PROBLEMA IDENTIFICADO:');
      console.log('‚ùå CORS policy bloqueava fetch() direto das URLs do Firebase Storage');
      console.log('‚ùå "No Access-Control-Allow-Origin header" error');
      console.log('‚ùå Todas as requisi√ß√µes falhavam com "Failed to fetch"');
      
      console.log('\nüìã CORRE√á√ÉO IMPLEMENTADA:');
      console.log('‚úÖ Usar Firebase SDK (getBlob) em vez de fetch() direto');
      console.log('‚úÖ Extrair caminho do arquivo da URL do Storage');
      console.log('‚úÖ Usar storageRef + getBlob para contornar CORS');
      console.log('‚úÖ Fallback para fetch() se Firebase SDK falhar');
      console.log('‚úÖ Logs detalhados para debug');
      
      console.log('\nüìã LOGS ESPERADOS AGORA:');
      console.log('- üìÑ Documento xxx.jpeg √© URL do Storage, baixando via Firebase SDK...');
      console.log('- üìÑ Caminho do arquivo extra√≠do: vendas/[ID]/arquivo.jpeg');
      console.log('- ‚úÖ Download via Firebase SDK bem-sucedido: 12345 bytes');
      console.log('- ‚úÖ Documento xxx.jpeg baixado com sucesso (12345 bytes)');
      console.log('- ‚úÖ Documento xxx.jpeg adicionado ao ZIP');
      console.log('- üîç Total de documentos processados: X');
      console.log('- üìÅ Arquivo ZIP gerado: documentos-venda-[ID].zip');
      console.log('- ‚úÖ Download iniciado com sucesso!');
      
      console.log('\nüîß DIFEREN√áA T√âCNICA:');
      console.log('‚ùå ANTES: fetch(firebaseStorageURL) ‚Üí CORS blocked');
      console.log('‚úÖ AGORA: getBlob(storageRef(filePath)) ‚Üí Firebase SDK (sem CORS)');
      
      console.log('\nüìÑ EXEMPLO DE URL E EXTRA√á√ÉO:');
      console.log('URL: https://firebasestorage.googleapis.com/v0/b/projeto.app/o/vendas%2Fuser%2Farquivo.jpeg?alt=media&token=...');
      console.log('Caminho extra√≠do: vendas/user/arquivo.jpeg');
      console.log('Firebase ref: storageRef(storage, "vendas/user/arquivo.jpeg")');
      console.log('Download: getBlob(fileRef) ‚Üí Blob');
      
      console.log('\nüîç Verificando se h√° documentos na p√°gina...');
      
      // Verificar se h√° se√ß√£o de documentos
      const documentSections = document.querySelectorAll('*');
      let temDocumentos = false;
      let urlsFirebase = [];
      
      documentSections.forEach(element => {
        const text = element.textContent?.toLowerCase() || '';
        if (text.includes('documentos anexados') || text.includes('documento') || text.includes('anexo')) {
          temDocumentos = true;
        }
        
        // Procurar URLs do Firebase Storage no HTML
        if (text.includes('firebasestorage.googleapis.com')) {
          urlsFirebase.push(text.substring(0, 200) + '...');
        }
      });
      
      if (!temDocumentos) {
        console.log('\n‚ùå Nenhuma se√ß√£o de documentos encontrada');
        console.log('üìù Certifique-se de estar numa venda que tem documentos anexados');
      } else {
        console.log('\n‚úÖ Se√ß√£o de documentos encontrada!');
        console.log(`üìä URLs do Firebase Storage detectadas: ${urlsFirebase.length}`);
      }
      
      // Verificar se h√° bot√£o de download
      const downloadButtons = document.querySelectorAll('button');
      let botaoDownload = null;
      
      downloadButtons.forEach((button) => {
        const buttonText = button.textContent?.toLowerCase() || '';
        if (buttonText.includes('baixar') && buttonText.includes('documento')) {
          botaoDownload = button;
        }
      });
      
      if (!botaoDownload) {
        console.log('\n‚ùå Bot√£o "Baixar Todos os Documentos" n√£o encontrado');
        console.log('üìù Verifique se a venda tem documentos anexados');
      } else {
        console.log('\n‚úÖ Bot√£o "Baixar Todos os Documentos" encontrado!');
        console.log('üéâ PRONTO PARA TESTE DE CORRE√á√ÉO CORS!');
        console.log('üìù Clique no bot√£o para testar o download corrigido');
      }
      
      console.log('\n‚ö†Ô∏è VERIFICA√á√ïES IMPORTANTES:');
      console.log('1. ‚úÖ N√ÉO deve aparecer "CORS policy" nos erros');
      console.log('2. ‚úÖ Deve aparecer "baixando via Firebase SDK"');
      console.log('3. ‚úÖ Deve aparecer "Download via Firebase SDK bem-sucedido"');
      console.log('4. ‚úÖ Deve aparecer "X bytes" para cada documento');
      console.log('5. ‚úÖ O arquivo ZIP deve ser gerado e baixado');
      
      console.log('\nüöÄ BENEF√çCIOS DA CORRE√á√ÉO:');
      console.log('‚úÖ Sem problemas de CORS');
      console.log('‚úÖ Download autenticado via Firebase SDK');
      console.log('‚úÖ Mais confi√°vel que fetch() direto');
      console.log('‚úÖ Funciona com regras de Storage do Firebase');
      console.log('‚úÖ Fallback para fetch() se necess√°rio');
      
      // Testar extra√ß√£o de caminho (simula√ß√£o)
      console.log('\nüß™ TESTE DE EXTRA√á√ÉO DE CAMINHO:');
      const testarExtracao = (url) => {
        try {
          const urlObj = new URL(url);
          const pathMatch = urlObj.pathname.match(/\/o\/(.+)\?/);
          if (pathMatch) {
            const filePath = decodeURIComponent(pathMatch[1]);
            console.log(`üìù URL: ${url.substring(0, 80)}...`);
            console.log(`üìù Caminho extra√≠do: ${filePath}`);
            return true;
          }
          return false;
        } catch (error) {
          console.log(`‚ùå Erro na extra√ß√£o: ${error.message}`);
          return false;
        }
      };
      
      // Exemplos de teste
      const exemploUrl = 'https://firebasestorage.googleapis.com/v0/b/projeto.app/o/vendas%2Fuser%2Farquivo.jpeg?alt=media&token=123';
      testarExtracao(exemploUrl);
      
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testarCorrecaoCorsDownload();